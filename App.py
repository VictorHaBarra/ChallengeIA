import streamlit as st
import pandas as pd
from surprise import Dataset, Reader, SVD
from surprise.model_selection import train_test_split

# Fun√ß√£o para obter recomenda√ß√µes
def get_recommendations(user_id, user_data, product_data, n=3):
    # Obtenha o hist√≥rico de compras do usu√°rio
    historico = user_data.loc[user_data['ID do Usu√°rio'] == user_id, 'Hist√≥rico de Compras'].values[0]
    
    # Filtrar os produtos que o usu√°rio ainda n√£o comprou
    produtos_nao_comprados = product_data[~product_data['ID do Produto'].isin(historico)]
    
    # Ajustar o n√∫mero de recomenda√ß√µes se for maior do que os produtos restantes
    n_recomendacoes = min(n, len(produtos_nao_comprados))
    
    # Gerar as recomenda√ß√µes
    recomendacoes = produtos_nao_comprados.sample(n_recomendacoes)
    
    return recomendacoes

# Dados de produtos
produtos = pd.DataFrame({
    'ID do Produto': [1, 2, 3, 4, 5],
    'Nome do Produto': ['Gel de Limpeza Facial', 'Creme Hidratante', '√ìleo para Barba', 'Perfume Masculino', 'Shampoo Anticaspa'],
    'Categoria': ['Cuidados com a Pele', 'Cuidados com a Pele', 'Barba', 'Fragr√¢ncias', 'Cabelo'],
    'Pre√ßo': [25.99, 19.99, 15.50, 39.99, 12.99],
    'Descri√ß√£o': ['Limpa profundamente a pele', 'Hidrata√ß√£o intensa', 'Suaviza e nutre a barba', 'Aroma elegante e duradouro', 'Combate a caspa e a oleosidade']
})

# Dados de usu√°rios
usuarios = pd.DataFrame({
    'ID do Usu√°rio': [101, 102, 103, 104, 105],
    'Idade': [30, 25, 35, 28, 40],
    'Localiza√ß√£o': ['S√£o Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador'],
    'Hist√≥rico de Compras': [[2, 4], [1, 3, 5], [1, 2, 4], [3, 5], [1, 4]],
    'Prefer√™ncias': [['Cuidados com a Pele'], ['Barba', 'Cabelo'], ['Fragr√¢ncias'], ['Cuidados com a Pele', 'Cabelo'], ['Barba']]
})

# Estiliza√ß√£o com CSS
st.markdown("""
    <style>
    .stButton > button {
        background-color: #4CAF50;
        color: white;
        font-size: 16px;
    }
    .stButton > button:hover {
        background-color: #45a049;
    }
    .product-card {
        background-color: #f8f9fa;
        padding: 10px;
        border-radius: 8px;
        border: 1px solid #e0e0e0;
        margin-bottom: 10px;
    }
    .product-card h4 {
        margin-bottom: 5px;
    }
    </style>
    """, unsafe_allow_html=True)

# T√≠tulo estilizado
st.title("üõçÔ∏è Sistema de Recomenda√ß√£o de Produtos")

# Selecionar Usu√°rio
st.subheader("Selecione um Usu√°rio")
user_id = st.selectbox("Usu√°rios dispon√≠veis:", usuarios['ID do Usu√°rio'])

# Mostrar informa√ß√µes do usu√°rio
st.subheader("Informa√ß√µes do Usu√°rio")
user_info = usuarios[usuarios['ID do Usu√°rio'] == user_id].iloc[0]
st.markdown(f"**Idade**: {user_info['Idade']}")
st.markdown(f"**Localiza√ß√£o**: {user_info['Localiza√ß√£o']}")
st.markdown(f"**Prefer√™ncias**: {', '.join(user_info['Prefer√™ncias'])}")

# Bot√£o para gerar recomenda√ß√µes
if st.button('üîç Gerar Recomenda√ß√µes'):
    recomendacoes = get_recommendations(user_id, usuarios, produtos)
    
    st.subheader("üõí Recomenda√ß√µes de Produtos")
    
    if recomendacoes.empty:
        st.warning("Nenhuma recomenda√ß√£o dispon√≠vel. O usu√°rio j√° comprou todos os produtos.")
    else:
        for idx, row in recomendacoes.iterrows():
            # Cart√£o de produto estilizado
            st.markdown(f"""
            <div class='product-card'>
                <h4>**{row['Nome do Produto']}**</h4>
                <p>Categoria: {row['Categoria']}</p>
                <p>Pre√ßo: R$ {row['Pre√ßo']}</p>
                <p>Descri√ß√£o: {row['Descri√ß√£o']}</p>
            </div>
            """, unsafe_allow_html=True)
